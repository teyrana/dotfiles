;;;_ + cc-mode

(defconst borland-c-style
  '((c-backslash-column		   . 72)
    (c-basic-offset		   . 4)
    (c-block-comment-prefix	   . "")
    (c-hanging-semi&comma-criteria . nil)
    (c-comment-continuation-stars  . "")
    (c-comment-only-line-offset    . 0)
    (c-electric-pound-behavior	   . (alignleft))
    (c-cleanup-list
     . (defun-close-semi list-close-comma scope-operator))
    (c-hanging-colons-alist
     . ((inher-intro)
	(member-init-intro before)
	(case-label after)
	(label after)
	(access-key after)))
    (c-hanging-braces-alist
     . ((brace-list-open before)
	(brace-list-close before)
	(substatement-open before)
	(substatement-case-open before)
	(else-clause before)
	(defun-open before)
	(defun-close before)
	(class-open before)
	(class-close before)
	(block-open after)
	(block-close before)
	(inline-open after)
	(inline-close before)))
    (c-offsets-alist
     . ((string                . c-lineup-dont-change)
	(c		       . c-lineup-C-comments)
	(defun-open	       . 0)
	(defun-close	       . 0)
	(defun-block-intro     . +)
	(class-open	       . 0)
	(class-close	       . 0)
	(inline-open	       . +)
	(inline-close	       . 0)
	(func-decl-cont        . +)
	(knr-argdecl-intro     . +)
	(knr-argdecl	       . 0)
	(topmost-intro	       . 0)
	(topmost-intro-cont    . 0)
	(member-init-intro     . +)
	(member-init-cont      . 0)
	(inher-intro	       . +)
	(inher-cont	       . c-lineup-multi-inher)
	(block-open	       . 0)
	(block-close	       . 0)
	(brace-list-open       . 0)
	(brace-list-close      . 0)
	(brace-list-intro      . +)
	(brace-list-entry      . 0)
	(brace-entry-open      . 0)
	(statement-block-intro . +)
	(statement-case-intro  . +)
	(statement-case-open   . 0)
	(substatement	       . +)
	(case-label	       . 0)
	(access-label	       . -)
	(label		       . 2)
	(do-while-closure      . 0)
	(else-clause	       . 0)
	(catch-clause	       . 0)
	(comment-intro	       . c-lineup-comment)
	(arglist-intro	       . +)
	(arglist-cont	       . 0)
	(arglist-close	       . +)
	(stream-op	       . c-lineup-streamop)
	(inclass	       . +)
	(cpp-macro	       . -1000)
	(cpp-macro-cont        . c-lineup-dont-change)
	(friend	               . 0)
	(objc-method-intro     . -1000)
	(objc-method-args-cont . c-lineup-ObjC-method-args)
	(objc-method-call-cont . c-lineup-ObjC-method-call)
	(extern-lang-open      . 0)
	(extern-lang-close     . 0)
	(inextern-lang	       . +)
	(namespace-open        . 0)
	(namespace-close       . 0)
	(innamespace	       . +)
	(arglist-cont-nonempty . c-lineup-arglist)
	(substatement-open     . 0)
	(statement	       . c-lineup-runin-statements)
	(statement-cont        . c-lineup-runin-statements))))
  "Borland C programming style")

(defconst edg-c-style
  '((c-backslash-column		   . 72)
    (c-basic-offset		   . 2)
    (c-block-comment-prefix	   . "")
    (c-hanging-semi&comma-criteria . nil)
    (c-comment-continuation-stars  . "")
    (c-comment-only-line-offset    . 0)
    (c-electric-pound-behavior	   . (alignleft))
    (c-cleanup-list
     . (defun-close-semi list-close-comma scope-operator))
    (c-hanging-colons-alist
     . ((inher-intro)
	(member-init-intro before)
	(case-label after)
	(label after)
	(access-key after)))
    (c-hanging-braces-alist
     . ((brace-list-open before)
	(brace-list-close before)
	(substatement-open before)
	(substatement-case-open before)
	(defun-open before)
	(defun-close before)
	(class-open before)
	(class-close before)
	(block-open after)
	(block-close before)
	(inline-open after)
	(inline-close before)))
    (c-offsets-alist
     . ((string                . c-lineup-dont-change)
	(c		       . c-lineup-C-comments)
	(defun-open	       . 0)
	(defun-close	       . 0)
	(defun-block-intro     . +)
	(class-open	       . 0)
	(class-close	       . 0)
	(inline-open	       . +)
	(inline-close	       . 0)
	(func-decl-cont        . +)
	(knr-argdecl-intro     . +)
	(knr-argdecl	       . 0)
	(topmost-intro	       . 0)
	(topmost-intro-cont    . 0)
	(member-init-intro     . +)
	(member-init-cont      . 0)
	(inher-intro	       . +)
	(inher-cont	       . c-lineup-multi-inher)
	(block-open	       . 0)
	(block-close	       . 0)
	(brace-list-open       . 0)
	(brace-list-close      . 0)
	(brace-list-intro      . +)
	(brace-list-entry      . 0)
	(brace-entry-open      . 0)
	(statement-block-intro . +)
	(statement-case-intro  . +)
	(statement-case-open   . 0)
	(substatement	       . +)
	(case-label	       . 0)
	(access-label	       . -)
	(label		       . 2)
	(do-while-closure      . 0)
	(else-clause	       . 0)
	(catch-clause	       . 0)
	(comment-intro	       . c-lineup-comment)
	(arglist-intro	       . +)
	(arglist-cont	       . 0)
	(arglist-close	       . +)
	(stream-op	       . c-lineup-streamop)
	(inclass	       . +)
	(cpp-macro	       . -1000)
	(cpp-macro-cont        . c-lineup-dont-change)
	(friend	               . 0)
	(objc-method-intro     . -1000)
	(objc-method-args-cont . c-lineup-ObjC-method-args)
	(objc-method-call-cont . c-lineup-ObjC-method-call)
	(extern-lang-open      . 0)
	(extern-lang-close     . 0)
	(inextern-lang	       . +)
	(namespace-open        . 0)
	(namespace-close       . 0)
	(innamespace	       . +)
	(arglist-cont-nonempty . c-lineup-arglist)
	(substatement-open     . 0)
	(statement	       . c-lineup-runin-statements)
	(statement-cont        . c-lineup-runin-statements))))
  "EDG C programming style")

(defun my-c-mode-common-hook ()
  (cond
   ((string-match "borland/edg" default-directory)
    (c-add-style "EDG" edg-c-style t)
    (c-set-style "EDG")

    (setq indent-tabs-mode nil) ; disallow the use of tabs
    (setq c-indent-level 4) ; sets 'tabs' to be 4 spaces wide

    (set (make-local-variable 'comment-start) "/* ")
    (set (make-local-variable 'comment-end) "*/"))

   (t
    (c-add-style "borland" borland-c-style t)
    (c-set-style "borland")

    (setq indent-tabs-mode t) ; allow the use of tabs

    (set (make-local-variable 'comment-start) "// ")
    (set (make-local-variable 'comment-end) "")))

  (turn-on-auto-fill)
  (set (make-local-variable 'fill-nobreak-predicate)
       (function
	(lambda nil
	  (not (eq (get-text-property (point) (quote face))
		   (quote font-lock-comment-face))))))

  (setq c-indent-comments-syntactically-p t)

  (define-key c-mode-base-map "\C-m" 'newline-and-indent)

  (set (make-local-variable 'parens-require-spaces) nil))

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

(set-face-foreground font-lock-comment-face "yellow")
